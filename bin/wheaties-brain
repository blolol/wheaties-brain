#!/usr/bin/env ruby

require 'bundler/setup'
require 'brane'
require 'cinch'
require 'json'

if ARGV.empty?
  $stderr.puts 'usage: wheaties-brane path/to/config.json'
  exit 1
end

module Wheaties
  class << self
    attr_accessor :brane, :config, :reply_pattern

    def command?(message)
      message.message.start_with? '.'
    end

    def from_self?(message)
      message.user.nick == Wheaties.config['nick']
    end

    def ignore?(message)
      command?(message) || from_self?(message)
    end
  end
end

Wheaties.config = JSON.parse(File.read(File.expand_path(ARGV.first)))
Wheaties.brane = Brane::Memory.new
Wheaties.reply_pattern = /#{Regexp.escape(Wheaties.config['nick'])}/i

Cinch::Bot.new do
  configure do |c|
    c.channels = Wheaties.config['channels']
    c.messages_per_second = Wheaties.config['messages_per_second'] || 100
    c.nick = Wheaties.config['nick']
    c.password = Wheaties.config['password']
    c.port = Wheaties.config['port']
    c.real = Wheaties.config['real']
    c.server = Wheaties.config['server']
    c.server_queue_size = Wheaties.config['server_queue_size'] || 1000
    c.ssl.use = Wheaties.config['use_ssl'] || false
    c.ssl.verify = Wheaties.config['verify_ssl'] || false
    c.user = Wheaties.config['user']
  end

  on :message do |message|
    if message.channel? && !Wheaties.ignore?(message)
      Wheaties.brane.add message.message
    end
  end

  on :message, Wheaties.reply_pattern do |message|
    unless Wheaties.ignore?(message)
      message.reply Wheaties.brane.sentence
    end
  end
end.start
